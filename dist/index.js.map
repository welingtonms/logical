{"version":3,"file":"index.js","sources":["../src/and/and.js","../src/not/not.js","../src/nand/nand.js","../src/or/or.js","../src/nor/nor.js","../src/xor/xor.js","../src/xnor/xnor.js","../src/logical.js"],"sourcesContent":["/**\n * Utility function to perform logical AND operation.\n * \n * It returns `true` when all provided values/expressions are _truthy_, `false` otherwise.\n * \n * @param {any} condition - initial value or expression to be evaluated.\n * @param  {...any} conditions - sequence of values or expressions to be evaluated.\n * @example\n * and(true, true); // true\n * and(true, false); // false\n * and(false, true); // false\n * and(false, false); // false\n */\nfunction and(condition, ...conditions) {\n  let res = Boolean(condition)\n  \n  for (let i = 0; i < conditions.length && res; i++) {\n    res = res && Boolean(conditions[i])\n  }\n\n  return res\n}\n\nexport default and\n","/**\n * Utility function to perform logical NOT operation.\n * \n * It returns `true` when the provided value/expression is _falsy_, `false` otherwise.\n * \n * @param {any} condition - value or expression to be evaluated.\n * @example\n * not(true); // false\n * not(false); // true\n */\nfunction not(condition) {\n  return !Boolean(condition)\n}\n\nexport default not\n","import not from '../not'\nimport and from '../and'\n\n/**\n * Utility function to perform logical NAND operation.\n * \n * It returns `true` if the result of AND between all provided values/expressions is _falsy_, `false` otherwise.\n * \n * @param {any} condition - initial value or expression to be evaluated.\n * @param  {...any} conditions - sequence of values or expressions to be evaluated.\n * @example\n * nand(true, true); // false\n * nand(true, false); // true\n * nand(false, true); // true\n * nand(false, false); // true\n */\nfunction nand(condition, ...conditions) {\n  return not(and(condition, ...conditions))\n}\n\nexport default nand\n","/**\n * Utility function to perform logical OR operation.\n * \n * It returns `true` when at least one of the provided values/expressions is _truthy_, `false` otherwise.\n * \n * @param {any} condition - initial value or expression to be evaluated.\n * @param  {...any} conditions - sequence of values or expressions to be evaluated.\n * @example\n * or(true, true); // true\n * or(true, false); // true\n * or(false, true); // true\n * or(false, false); // false\n */\nfunction or(condition, ...conditions) {\n  let res = Boolean(condition)\n  \n  for (let i = 0; i < conditions.length && !res; i++) {\n    res = res || Boolean(conditions[i])\n  }\n\n  return res\n}\n\nexport default or\n","import not from '../not'\nimport or from '../or'\n\n/**\n * Utility function to perform logical NOR operation.\n * \n * It returns `true` if the result of OR between all provided values/expressions is _falsy_, `false` otherwise.\n * \n * @param {any} condition - initial value or expression to be evaluated.\n * @param  {...any} conditions - sequence of values or expressions to be evaluated.\n * @example\n * nor(true, true); // false\n * nor(true, false); // true\n * nor(false, true); // true\n * nor(false, false); // true\n */\nfunction nor(condition, ...conditions) {\n  return not(or(condition, ...conditions))\n}\n\nexport default nor\n","/**\n * Utility function to perform logical XOR operation.\n * \n * It returns `true` when the provided values/expressions are not _truthy_ or _falsy_ at the same time, `false` otherwise.\n * \n * @param {any} condition1 - first value or expression to be evaluated.\n * @param {any} condition2 - second value or expression to be evaluated.\n * @example\n * xor(true, true); // false\n * xor(true, false); // true\n * xor(false, true); // true\n * xor(false, false); // false\n */\nfunction xor(condition1, condition2) {\n  return Boolean(condition1) != Boolean(condition2)\n}\n\nexport default xor\n","import not from '../not'\nimport xor from '../xor'\n\n/**\n * Utility function to perform logical XNOR operation.\n * \n * It returns `true` when the provided values/expressions are both _truthy_ or both _falsy_, `false` otherwise.\n * \n * @param {any} condition1 - first value or expression to be evaluated.\n * @param {any} condition2 - second value or expression to be evaluated.\n * @example\n * xnor(true, true); // false\n * xnor(true, false); // true\n * xnor(false, true); // true\n * xnor(false, false); // false\n */\nfunction xnor(condition1, condition2) {\n  return not(xor(condition1, condition2))\n}\n\nexport default xnor\n","import and from \"./and\";\nimport nand from \"./nand\";\nimport nor from \"./nor\";\nimport not from \"./not\";\nimport or from \"./or\";\nimport xnor from \"./xnor\";\nimport xor from \"./xor\";\n\n/**\n * @param {*} initialValue\n * @returns {Logical}\n */\nfunction Logical(initialValue) {\n  let value = Boolean(initialValue);\n\n  return {\n    /**\n     * Returns current value for this chained logical operation\n     * @returns {boolean}\n     */\n    value() {\n      return value;\n    },\n    /**\n     * Applies AND to the current value and the provided values/expressions.\n     * @param  {...any} conditions \n     * @returns {boolean}\n     */\n    and(...conditions) {\n      value = and(value, ...conditions);\n      return this;\n    },\n    /**\n     * Applies OR to the current value and the provided values/expressions.\n     * @param  {...any} conditions \n     */\n    or(...conditions) {\n      value = or(value, ...conditions);\n      return this;\n    },\n    /**\n     * Applies NAND to the current value and the provided values/expressions.\n     * @param  {...any} conditions \n     */\n    nand(...conditions) {\n      value = nand(value, ...conditions);\n      return this;\n    },\n    /**\n     * Applies NOR to the current value and the provided values/expressions.\n     * @param  {...any} conditions \n     */\n    nor(...conditions) {\n      value = nor(value, ...conditions);\n      return this;\n    },\n    /**\n     * Applies NOT to the current value\n     */\n    not() {\n      value = not(value);\n\n      return this;\n    },\n    /**\n     * Applies XNOR to the current value and the provided value/expression.\n     * @param {*} condition2 \n     */\n    xnor(condition2) {\n      value = xnor(value, condition2);\n      return this;\n    },\n    /**\n     * Applies XOR to the current value and the provided value/expression.\n     * @param {*} condition2 \n     */\n    xor(condition2) {\n      value = xor(value, condition2);\n      return this;\n    },\n  };\n}\n\n/**\n * Returns current value for this chained logical operation.\n * @callback LogicalValue\n * @returns {boolean} current value for this logical operation.\n */\n\n/**\n * Applies AND to the current value and the provided values/expressions.\n * @callback LogicalAnd\n * @param  {...any} conditions \n * @returns {Logical}\n */\n\n/**\n * Applies OR to the current value and the provided values/expressions.\n * @callback LogicalOr\n * @param  {...any} conditions \n * @returns {Logical}\n */\n\n/**\n * Applies NAND to the current value and the provided values/expressions.\n * @callback LogicalNand\n * @param  {...any} conditions \n * @returns {Logical}\n */\n\n/**\n * Applies NOR to the current value and the provided values/expressions.\n * @callback LogicalNor\n * @param  {...any} conditions \n * @returns {Logical}\n */\n\n/**\n * Applies NOT to the current value\n * @callback LogicalNot\n * @returns {Logical}\n */\n\n/**\n * Applies XNOR to the current value and the provided value/expression.\n * @callback LogicalXnor\n * @param {*} condition2 \n * @returns {Logical}\n */\n\n/**\n * Applies XOR to the current value and the provided value/expression.\n * @callback LogicalXor\n * @param {*} condition2 \n * @returns {Logical}\n */\n\n/**\n * The complete Triforce, or one or more components of the Triforce.\n * @typedef {Object} Logical\n * @property {LogicalValue} value - current value.\n * @property {LogicalAnd} and - performs AND operation.\n * @property {LogicalOr} or - performs OR operation.\n * @property {LogicalNand} nand - performs NAND operation.\n * @property {LogicalNor} nor - performs NOR operation.\n * @property {LogicalNot} not - performs NOT operation.\n * @property {LogicalXnor} xnor - performs XNOR operation.\n * @property {LogicalXor} xor - performs XOR operation.\n */\n\nexport default Logical;\n"],"names":["and","condition","res","Boolean","_len","arguments","length","conditions","Array","_key","i","not","nand","apply","concat","or","nor","xor","condition1","condition2","xnor","Logical","initialValue","value","this","_len2","_key2","_len3","_key3","_len4","_key4"],"mappings":"AAaA,SAASA,EAAIC,GAA0B,IACrC,IAAIC,EAAMC,QAAQF,GADmBG,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,EAAA,GAAAJ,UAAAI,GAGrC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWD,QAAUJ,EAAKQ,IAC5CR,EAAMA,GAAOC,QAAQI,EAAWG,IAGlC,OAAOR,ECVT,SAASS,EAAIV,GACX,OAAQE,QAAQF,GCKlB,SAASW,EAAKX,GAA0B,IAAA,IAAAG,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,EAAA,GAAAJ,UAAAI,GACtC,OAAOE,EAAIX,EAAGa,cAACZ,GAAJa,OAAkBP,KCJ/B,SAASQ,EAAGd,GAA0B,IACpC,IAAIC,EAAMC,QAAQF,GADkBG,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,EAAA,GAAAJ,UAAAI,GAGpC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWD,SAAWJ,EAAKQ,IAC7CR,EAAMA,GAAOC,QAAQI,EAAWG,IAGlC,OAAOR,ECJT,SAASc,EAAIf,GAA0B,IAAA,IAAAG,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAA,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,EAAA,GAAAJ,UAAAI,GACrC,OAAOE,EAAII,EAAEF,cAACZ,GAAHa,OAAiBP,KCJ9B,SAASU,EAAIC,EAAYC,GACvB,OAAOhB,QAAQe,IAAef,QAAQgB,GCExC,SAASC,EAAKF,EAAYC,GACxB,OAAOR,EAAIM,EAAIC,EAAYC,ICL7B,SAASE,EAAQC,GACf,IAAIC,EAAQpB,QAAQmB,GAEpB,MAAO,CAKLC,MAAQ,WACN,OAAOA,GAOTvB,IAAmB,WAAA,IAAA,IAAAI,EAAAC,UAAAC,OAAZC,EAAY,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAZF,EAAYE,GAAAJ,UAAAI,GAEjB,OADAc,EAAQvB,EAAGa,cAACU,GAAJT,OAAcP,IACfiB,MAMTT,GAAkB,WAAA,IAAA,IAAAU,EAAApB,UAAAC,OAAZC,EAAY,IAAAC,MAAAiB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAZnB,EAAYmB,GAAArB,UAAAqB,GAEhB,OADAH,EAAQR,EAAEF,cAACU,GAAHT,OAAaP,IACdiB,MAMTZ,KAAoB,WAAA,IAAA,IAAAe,EAAAtB,UAAAC,OAAZC,EAAY,IAAAC,MAAAmB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAZrB,EAAYqB,GAAAvB,UAAAuB,GAElB,OADAL,EAAQX,EAAIC,cAACU,GAALT,OAAeP,IAChBiB,MAMTR,IAAmB,WAAA,IAAA,IAAAa,EAAAxB,UAAAC,OAAZC,EAAY,IAAAC,MAAAqB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAZvB,EAAYuB,GAAAzB,UAAAyB,GAEjB,OADAP,EAAQP,EAAGH,cAACU,GAAJT,OAAcP,IACfiB,MAKTb,IAAM,WAGJ,OAFAY,EAAQZ,EAAIY,GAELC,MAMTJ,KArDK,SAqDAD,GAEH,OADAI,EAAQH,EAAKG,EAAOJ,GACbK,MAMTP,IA7DK,SA6DDE,GAEF,OADAI,EAAQN,EAAIM,EAAOJ,GACZK"}